
// noise.sca

#import <hash.sca>

#import <utils>

using namespace std;

// Worley Chebyshev Noise
export float worleyNoise(vec2 uv){
  float n = 9e9;
  for(int i = -1; i < 2; i++){
    for(int j = -1; j < 2; j++){
      vec2 p = floor(uv) + vec2(i, j);
      vec2 h = h22(p);
      vec2 g = p + 0.5+ 0.5 * sin(h*12.60);
      float xx = abs(uv.x-g.x);
      float yy = abs(uv.y-g.y);
      float d = max(xx, yy);
      n = d < n ? d : n;
    }
  }
  return n;
}

// https://www.shadertoy.com/view/Xd23Dh
export float voroNoiseIQ( in vec2 p, float u, float v ){
	float k = 1.0 + 64.0 * pow(1.0-v, 6.0);
  vec2 i = floor(p);
  vec2 f = fract(p);
	vec2 a = vec2(0.0,0.0);
  for( int y=-2; y<=2; y++ ){
    for( int x=-2; x<=2; x++ ){
      vec2  g = vec2( x, y );
      vec3  o = h32( i + g ) * vec3(u, u, 1.0);
      vec2  d = g - f + o.xy;
      float w = pow( 1.0 - smoothstep(0.0, 1.41, safeLength(d)), k );
      a += vec2(o.z*w, w);
    }
  }
	return a.x/a.y;
}

//https://www.shadertoy.com/view/XdXGW8
export float gradientNoiseIQ( in vec2 p ){
  vec2 i = floor(p);
  vec2 f = fract(p);
  vec2 u = f*f*(3.0-2.0*f);
  return mix( mix(dot( h22( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                  dot( h22( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),

              mix(dot( h22( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                  dot( h22( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}
 
// https://www.shadertoy.com/view/Msf3WH
export float simplexNoiseIQ( in vec2 p ){
  const float K1 = 0.366025404; // (sqrt(3)-1)/2;
  const float K2 = 0.211324865; // (3-sqrt(3))/6;
  vec2  i = floor( p + (p.x+p.y)*K1 );
  vec2  a = p - i + (i.x+i.y)*K2;
  float m = step(a.y, a.x); 
  vec2  o = vec2(m, 1.0-m);
  vec2  b = a - o + K2;
  vec2  c = a - 1.0 + 2.0*K2;
  vec3  h = max( 0.5 - vec3(dot(a,a), 
                            dot(b,b), 
                            dot(c,c) ), 0.0 );
  vec3  n = h*h*h*h*vec3( dot(a,h22(i+0.0)), 
                          dot(b,h22(i+o)), 
                          dot(c,h22(i+1.0))
                        );
  return dot( n, vec3(70.0) );
}

// https://www.shadertoy.com/view/lsf3WH
export float valueNoiseIQ( in vec2 p ){
  vec2 i = floor( p );
  vec2 f = fract( p );
  vec2 u = f*f*(3.0-2.0*f);
  return mix( 
              mix(h12( i + vec2(0.0,0.0) ), 
                  h12( i + vec2(1.0,0.0) ), u.x),
              mix(h12( i + vec2(0.0,1.0) ), 
                  h12( i + vec2(1.0,1.0) ), u.x), u.y
            );
} 

// a 3D version of valueNoiseIQ styled as lambda.
// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
// uncomment the lines in the function & modify the arguments & return type to turn it into a lambda function.
// as of Spark AR Studio v129 it appears that functions retuning lambda functions cannot be exported
// the lamda function would look as follows:

// export function<float(vec3)> fastNoiseLambda( vec3 density, optional<vec3> scroll ){
//   return [](vec3 pos){
//     pos *= density;
//     // ...
//     return o4.y * d.y + o4.x * (1.0 - d.y);
//   };
// };

export float fastNoiseLambda( vec3 pos, vec3 density, optional<vec3> scroll ){
  // return [](vec3 pos){
    pos *= density;
    pos += std::getTime() * scroll.valueOr(vec3(0.));
    vec3 a = floor(pos);
    vec3 d = pos - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
  // };
};