/*
 *
 *
 */

precision highp float;

using namespace std;

#define PI 3.1415926

#define R getRenderTargetSize()
#define T Texture2d
#define time getTime()

#define SCALE_NOISE 32.0

//
#define luma( rgba ) ( dot( rgba, HOLYGREY.rgb1 ) )
/*
vec2 R = R.xy,
  // U = fragCoord / R.y;                     // [0,1] vertically
     U = ( 2.*fragCoord - R ) / R.y;          // [-1,1] vertically
  // U = ( fragCoord - .5*R ) / R.y;          // [-1/2,1/2] vertically
  // U = ( 2.*fragCoord - R ) / min(R.x,R.y); // [-1,1] along the shortest side
  */
// gamma
#define degamma( rgba ) ( rgba*rgba )
#define gamma( rgba ) ( sqrt(rgba) )

// NOISE

// iq

float hash21(in vec2 p){
    p = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));
    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );
}

vec2 hash22(in vec2 p){
    p = fract(p*0.3183099 + 0.1)*17.0;
    float a = fract(p.x*p.y*(p.x + p.y)); // [0..1]
    a *= 2.0*3.14159287; // [0..2PI]
    return vec2(sin(a), cos(a));;
}

//Dave Hoskins https://www.shadertoy.com/view/4djSRW
/* vec2 hash22(vec2 p){
	return fract(cos(p*mat2(-64.2,71.3,81.4,-29.8))*8321.3);
} */


// https://www.shadertoy.com/view/lsf3WH
float valueNoiseIQ( in vec2 p ){
  vec2 i = floor( p );
  vec2 f = fract( p );
	vec2 u = f*f*(3.0-2.0*f);
  return mix( 
              mix( hash21( i + vec2(0.0,0.0) ), 
                  hash21( i + vec2(1.0,0.0) ), u.x),

              mix( hash21( i + vec2(0.0,1.0) ), 
                  hash21( i + vec2(1.0,1.0) ), u.x), u.y);
}

//https://www.shadertoy.com/view/XdXGW8
float gradientNoiseIQ( in vec2 p ){
  vec2 i = floor( p );
  vec2 f = fract( p );
	
	vec2 u = f*f*(3.0-2.0*f);

  return mix( 
              mix( dot( hash22( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                   dot( hash22( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),

              mix( dot( hash22( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                   dot( hash22( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

// https://www.shadertoy.com/view/Msf3WH
float simplexNoiseIQ( in vec2 p ){
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;
	vec2  i = floor( p + (p.x+p.y)*K1 );
    vec2  a = p - i + (i.x+i.y)*K2;
    float m = step(a.y,a.x); 
    vec2  o = vec2(m,1.0-m);
    vec2  b = a - o + K2;
	vec2  c = a - 1.0 + 2.0*K2;
    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	vec3  n = h*h*h*h*vec3( dot(a,hash22(i+0.0)), dot(b,hash22(i+o)), dot(c,hash22(i+1.0)));
    return dot( n, vec3(70.0) );
}


/** Value noise courtesy of BigWingz 
* check his youtube channel he has
* a video of this one.
* Succint version by FabriceNeyret
* https://gamedev.stackexchange.com/questions/123739/simple-coherent-noise-function-to-use-in-a-glsl-shader
*/
/* float noise( vec2 uv ){
    vec2 id = floor( uv );
          uv = fract( uv );
    uv *= uv * ( 3. - 2. * uv );  
    vec2 A = vec2( hash21(id)            , hash21(id + vec2(0,1)) ),  
         B = vec2( hash21(id + vec2(1,0)), hash21(id + vec2(1,1)) ),  
         C = mix( A, B, uv.x);
    return mix( C.x, C.y, uv.y );
} */

float lerp(float v0, float v1, float t) {
    return v0*(1.-t)+v1*t;
}

// @main
// @param texture
// @param buffer
// @param[default=0.33,min=0.0,max=1.0] scaleNoise
void main( 
  optional<T> texture,
  optional<T> buffer, 
  in float scaleNoise,
  out vec4 fragColor) {

  //
  vec2 fragCoord = fragment(floor(R * getVertexTexCoord()));
  vec2 uv = fragCoord.xy/R.y;
  
  float f = 0.0;

  vec2 uvamp = uv * lerp(1., 32.0, scaleNoise) + time;

  if( uv.y < 0.33 ){
    f = gradientNoiseIQ( uvamp );
  } else if (uv.y < 0.66) {
    f = valueNoiseIQ( uvamp );
  } else if (uv.y < 1.0) {
     f = simplexNoiseIQ( uvamp  );
  }
  
  f = 0.5 + 0.5*f;
	
  f *= smoothstep( 0.0, 0.005, abs(uv.y-0.33) );
  f *= smoothstep( 0.0, 0.005, abs(uv.y-0.66) );
  //
  fragColor = vec4( f, f, f, 1.0 );
}