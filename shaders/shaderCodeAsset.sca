// shaderCode.sca

 /*  
 *
 * Andrea Bovo <spleen666@gmail.com>
 * https://www.instagram.com/spleennooname/
 */

#import <noise.sca>

precision highp float;

using namespace std;

// @param v0
// @param v1
// @param[default=0.5,min=0.0,max=1.0] t
float lerp(float v0, float v1, float t) {
  return v0*(1.-t)+v1*t;
}

// @main
// @param texture
// @param[default=0.0,min=0.0,max=1.0] mode
// @param[default=0.33,min=0.0,max=1.0] scaleNoise
// @return color
vec4 main( 
  Texture2d texture,
  in float mode,
  in float scaleNoise) {

  vec2 R = getRenderTargetSize();
  vec2 fragCoord = fragment(floor(R * getVertexTexCoord()));
  vec2 uv = fragCoord.xy/R.xy;
  
  float time = getTime();

   // lerping scaled value noise for uv 1..32
  vec2 uvamp = uv * lerp(1., 32.0, scaleNoise) + time;

  float a = 2.0;
  vec2 p = 1. - cos(time * vec2(2.*a, 1.0) );

  float f = 0.0;

  // replace 6 with the amount of shaders
  int shaders = 6;
  float split = 1. / float(shaders);

  if( uv.y < split * 1. ){
    f = gradientNoiseIQ( uvamp );
  } else if (uv.y < split * 2.) {
    f = valueNoiseIQ( uvamp );
  } else if (uv.y < split * 3.) {
    f = worleyNoise( uvamp );
  } else if (uv.y < split * 4.) {
    f = simplexNoiseIQ( uvamp  );
  } else if (uv.y < split * 5.) {
    f = voroNoiseIQ( uvamp,  p.x, p.y  );
  } else if (uv.y < split * 6.) {
    f = fastNoiseLambda( vec3(uvamp, uvamp.x/uvamp.y), vec3(3.), vec3(0.1)  );
}

  // dividing lines
  for (int s = 0; s < shaders; s++){
    f *= smoothstep( 0.0, 1e-3, abs(uv.y - split * float(s)) );
  }

  //
  return mode == 0. ? vec4(vec3( 5e-1 * f + 5e-1 ), 1.0) : // only the noise contribute
                      texture.sample(uv + (5e-2 * f - 5e-2) ); // add noise to texture
}
